#Region "Compile Options"
Option Strict On
Option Explicit On
#End Region

#Region "Import Namespaces"
Imports System.Reflection
#End Region

Public Class FormSeleniumMCP
    'global constants
    Public Const versionNumber As String = "0.0.5" 'remember to keep SetupSeleniumMCP.Version in sync with this value
    Public Const applicationName As String = "Selenium MCP"
    Public Const requiredParameterCount As Integer = 4

    'private constants
    Private Const assignedDPExcelFileName As String = "AssignedDataProfiles"
    Private Const assignedDPExcelExtension As String = ".xls" 'xls or xlsx

    'private variables
    Private mcpMessageError As String = ""
    Private mcpPath As String = ""
    Private executableHistoryID As Integer = 0 'this should really be long because of how it's defined in the database, however, due to VBA limitations, VBA cannot send long values to our MosaicDBAccess DLL, so the DLL was modified to take in Integers instead.
    Private projName As String = ""
    Private resultsPath As String = ""

    Private Sub FormSeleniumMCP_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Dim parameterCount As Integer = 0
        Dim errorOccurred As Boolean = False

        'reset the log
        TextBoxLog.Text = ""

        'set the title and version
        Me.Text = applicationName
        ToolStripStatusVersion.Text = "Version: " & versionNumber

        'check the command-line arguments
        For Each parameter As String In Environment.GetCommandLineArgs
            Select Case parameterCount
                Case 0 'first parameter - mcp path
                    Try
                        If My.Computer.FileSystem.FileExists(parameter) Then
                            mcpPath = parameter
                        Else
                            appendToLog("Parameter 1 error: MCP does not exist in this path '" & parameter & "'")
                            Throw New Exception()
                        End If
                    Catch ex As Exception
                        errorOccurred = True
                    End Try
                Case 1 'second parameter - executable history id
                    Try
                        If IsNumeric(parameter) Then
                            If CType(parameter, Long) > 0 Then
                                executableHistoryID = CType(parameter, Integer)
                            Else
                                appendToLog("Parameter 1 error: Executable history ID must be greater than 0 - '" & parameter & "'")
                                Throw New Exception()
                            End If
                        Else
                            appendToLog("Parameter 1 error: Executable history ID must be a numeric value - '" & parameter & "'")
                            Throw New Exception()
                        End If
                    Catch ex As Exception
                        errorOccurred = True
                    End Try
                Case 2 'third parameter - project name
                    projName = parameter
                    ToolStripStatusProject.Text = "Project: " & projName
                Case 3 'fourth parameter - results path
                    Try
                        If My.Computer.FileSystem.DirectoryExists(parameter) Then
                            resultsPath = parameter
                            SaveFileDialogLog.InitialDirectory = resultsPath
                        Else
                            SaveFileDialogLog.InitialDirectory = "C:\"
                            appendToLog("Parameter 3 error: Results directory does not exist in this path '" & parameter & "'")
                            Throw New Exception()
                        End If
                    Catch ex As Exception
                        errorOccurred = True
                    End Try
                Case Else
                    appendToLog("Parameter " & (parameterCount + 1).ToString & " ignored: " & parameter)
            End Select
            parameterCount = parameterCount + 1
        Next

        'check the number of parameter is correct, and if so, run the MCP
        ' otherwise, show the User the errors.
        If parameterCount < requiredParameterCount Then
            appendToLog(requiredParameterCount & " parameters are expected, but " & parameterCount & " was passed in.")
            errorOccurred = True
        Else
            'log the parameters used
            appendToLog("Executable History ID: " & executableHistoryID.ToString)
            appendToLog("Project: " & projName)
            appendToLog("Results path: " & resultsPath)

            'run the MCP
            appendToLog("MCP has started...")
            Select Case MCP(executableHistoryID, resultsPath)
                Case 0 'MCP ran w/o errors
                    appendToLog("MCP executed successfully.")
                Case -1
                    errorOccurred = True
                    appendToLog(mcpMessageError)
                Case Else
                    errorOccurred = True
                    appendToLog("Unknown MCP error has occurred.")
            End Select
            appendToLog("MCP has stopped...")
        End If

        'leave the error message(s) for the user to read
        If errorOccurred Then
            appendToLog("An error occurred in the MCP.  Please close and rerun the MCP.")
        End If
    End Sub

    Private Sub ToolStripButtonSaveLog_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripButtonSaveLog.Click
        If SaveFileDialogLog.ShowDialog = Windows.Forms.DialogResult.OK Then
            Try
                System.IO.File.WriteAllText(SaveFileDialogLog.FileName, TextBoxLog.Text)
            Catch ex As Exception
                MsgBox("An error occurred while saving to '" & SaveFileDialogLog.FileName & "'")
            End Try
        End If
    End Sub

#Region "Private subs and functions unrelated to events"
    ''' <summary>
    ''' Appends a timestamp and text to the textbox in the MCP application.
    ''' </summary>
    ''' <param name="logText">The text to append.</param>
    ''' <param name="appendType"><para>Select 0 (default) if logText should appear as a new line and with a carriage return.  </para>
    ''' <para>Select 1 if logText should appear as a new line without a carriage return.</para>
    ''' <para>Select 2 if logText should appear as appended to the last line and with a carriage return.</para></param>
    ''' <remarks></remarks>
    Private Sub appendToLog(ByVal logText As String, Optional ByVal appendType As Integer = 0)
        'add text to the log
        Select Case appendType
            Case 1
                TextBoxLog.Text += My.Computer.Clock.LocalTime & vbTab & logText
            Case 2
                TextBoxLog.Text += logText & Environment.NewLine
            Case Else
                TextBoxLog.Text += My.Computer.Clock.LocalTime & vbTab & logText & Environment.NewLine
        End Select

        'move the cursor to the end of the log
        TextBoxLog.Select(TextBoxLog.TextLength, 0)

        'refresh the front-end so the user can see what's going on in real-time
        My.Application.DoEvents()
    End Sub

    ''' <summary>
    ''' The main logic that loads a client's DLL and executes Actions.
    ''' </summary>
    ''' <param name="executableHistoryID">The Executable History's ID (r_History_Executables.RecordID).</param>
    ''' <param name="resultsFolder">The folder where results will be stored.</param>
    ''' <remarks></remarks>
    Private Function MCP(ByVal executableHistoryID As Integer, ByVal resultsFolder As String) As Integer
        Dim actionReturnValue() As Object

        Dim returnCall As String = ""
        Dim returnCallValues() As String
        Dim returnRecordSet As New ADODB.Recordset

        Dim executableStepIDs As New ArrayList

        'reset the return value
        MCP = 0

        'connect to RSTAR database
        appendToLog("Connecting to database...")
        Try
            appendToLog("Using connection string: " & My.Settings.ConnectionString)
            returnCall = mosaicDll.ConnectToDB(My.Settings.ConnectionString)
            returnCallValues = returnCall.Split("|"c)
            If returnCallValues.Length > 0 AndAlso returnCallValues(0).Trim <> "0" Then
                appendToLog("Connection to database successful.")
            Else
                Throw New Exception()
            End If
        Catch ex As Exception
            MCP = -1
            mcpMessageError = "Error connecting to database: " & returnCall
            mosaicDll.DisconnectFromDB()
            Exit Function
        End Try

        'get the executable's name and description
        Dim executableName As String = ""
        Dim executableDescription As String = ""
        Try
            returnRecordSet = mosaicDll.RSTAR_GetProjectExecutableDescriptionNames(executableHistoryID)
        Catch ex As Exception
            MCP = -1
            mcpMessageError = "Error getting Executable's Name and/or Description: " & ex.Message
            Exit Function
        End Try
        Try
            If returnRecordSet IsNot Nothing AndAlso _
                returnRecordSet.State <> 0 AndAlso _
                returnRecordSet.RecordCount > 0 Then
                returnRecordSet.MoveFirst()
                While Not returnRecordSet.EOF
                    For Each field As ADODB.Field In returnRecordSet.Fields
                        Select Case field.Name.ToLower.Trim
                            Case "executablename"
                                executableName = field.Value.ToString
                            Case "executabledescription"
                                executableDescription = field.Value.ToString
                        End Select
                    Next
                    returnRecordSet.MoveNext()
                End While
            Else
                MCP = -1
                mcpMessageError = "Error getting Executable's Name and/or Description."
                Exit Function
            End If
        Catch ex As Exception
            MCP = -1
            mcpMessageError = "Error getting Executable's Name and/or Description: " & ex.Message
            Exit Function
        End Try

        'write some basic info about the executable to the execution log
        Try
            mosaicDll.Logger(senderMCP, "Timestamp|Sender|Include or Ignore|Heading|Contents", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog), True, 0, False)
            mosaicDll.Logger(senderMCP, "Report Generated", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
            mosaicDll.Logger(senderMCP, "Executable|" & executableName, My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
            mosaicDll.Logger(senderMCP, "Executable Description|" & executableDescription, My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
            mosaicDll.Logger(senderMCP, "***Automation Execution Log***", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
        Catch ex As Exception
            MCP = -1
            mcpMessageError = "Error writing to " & executionLog & ": " & ex.Message
            Exit Function
        End Try

        'get the Executable's History Step IDs
        Try
            returnRecordSet = mosaicDll.RSTAR_GetExecutableStepsRecordIDs(executableHistoryID)
        Catch ex As Exception
            MCP = -1
            mcpMessageError = "Error getting Executable steps: " & ex.Message
            Exit Function
        End Try
        Try
            If returnRecordSet IsNot Nothing AndAlso _
                returnRecordSet.State <> 0 AndAlso _
                returnRecordSet.RecordCount > 0 Then
                returnRecordSet.MoveFirst()
                While Not returnRecordSet.EOF
                    For Each field As ADODB.Field In returnRecordSet.Fields
                        'appendToLog("RSTAR_GetExecutableStepsRecordIDs: " & " [" & field.Name & " - " & field.Value.ToString & "]")
                        Select Case field.Name.ToLower.Trim
                            Case "executablesteprecordid"
                                executableStepIDs.Add(CType(field.Value, Long))
                        End Select
                    Next
                    returnRecordSet.MoveNext()
                End While
            Else
                MCP = -1
                mcpMessageError = "Error getting Executable steps."
                Exit Function
            End If
        Catch ex As Exception
            MCP = -1
            mcpMessageError = "Error getting Executable steps: " & ex.Message
            Exit Function
        End Try

        'get the History Action IDs for each Executable Step
        'then run the automated version
        Dim recordID As Integer 'this should really be long because of how it's defined in the database, however, due to VBA limitations, VBA cannot send long values to our MosaicDBAccess DLL, so the DLL was modified to take in Integers instead.
        Dim iteration As Integer
        Dim scriptName As String
        Dim description As String
        Dim myScripts As New ClassFunctions 'Create a class that contains all the custom functions/scripts.
        Dim myType As Type = myScripts.GetType
        For Each ID As Integer In executableStepIDs
            Try
                returnRecordSet = mosaicDll.RSTAR_GetActionHistoryRecordIDsAndCreateDataFile(ID, My.Computer.FileSystem.CombinePath(resultsFolder, assignedDPExcelFileName & ID.ToString & assignedDPExcelExtension), "Deep", senderMCP)
            Catch ex As Exception
                MCP = -1
                mcpMessageError = "Error getting Actions or creating data file: " & ex.Message
                Exit Function
            End Try
            Try
                If returnRecordSet IsNot Nothing AndAlso _
                    returnRecordSet.State <> 0 AndAlso _
                    returnRecordSet.RecordCount > 0 Then
                    returnRecordSet.MoveFirst()
                    While Not returnRecordSet.EOF
                        'get the action's information
                        recordID = 0
                        iteration = 0
                        scriptName = ""
                        description = ""
                        For Each field As ADODB.Field In returnRecordSet.Fields
                            Select Case field.Name.ToLower.Trim
                                Case "recordid"
                                    recordID = CType(field.Value, Integer)
                                Case "iteration"
                                    iteration = CType(field.Value, Integer)
                                Case "scriptname"
                                    scriptName = field.Value.ToString
                                Case "description"
                                    description = field.Value.ToString
                            End Select
                        Next

                        'run the action's script
                        Try
                            mosaicDll.Logger(senderMCP, "Action Starting|" & scriptName, My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                            mosaicDll.Logger(senderMCP, "Description|" & description, My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                        Catch ex As Exception
                            MCP = -1
                            mcpMessageError = "Error writing to " & executionLog & ": " & ex.Message
                            Exit Function
                        End Try
                        appendToLog("Executing Action script '" & scriptName & "'...", 1)
                        actionReturnValue = Nothing 'Set this value to nothing before each Action runs.
                        Try
                            'Create an array of parameters to pass into the Action.
                            Dim parametersFromMCP() As Object = New Object() {My.Computer.FileSystem.CombinePath(resultsFolder, assignedDPExcelFileName & ID.ToString & assignedDPExcelExtension), _
                                                                                iteration, _
                                                                                executableHistoryID, _
                                                                                recordID}

                            'Update the Action's start time.
                            mosaicDll.RSTAR_UpdateStartTimeStamp("action", recordID)

                            'Run the Action.
                            Dim myInfo As MethodInfo = myType.GetMethod(scriptName)
                            Dim myParameters() As Object = {parametersFromMCP}
                            actionReturnValue = CType(myInfo.Invoke(myScripts, myParameters), Object())

                            'Update the Action's end time and duration time.
                            mosaicDll.RSTAR_UpdateEndTimeStamp("action", recordID)
                            mosaicDll.RSTAR_UpdateExecutableTestDuration(executableHistoryID)

                            If actionReturnValue Is Nothing Then
                                mosaicDll.RSTAR_UpdateActionExecutionStatus(recordID, "Not completed") 'do not change the Status name
                                appendToLog("  Action UNKNOWN STATUS.  " & actionReturnValue(1).ToString, 2)
                                mosaicDll.Logger(senderMCP, "Test Action Status|Not completed", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                            Else
                                Select Case CType(actionReturnValue(0), Integer)
                                    Case executionStatusFailed
                                        mosaicDll.RSTAR_UpdateActionExecutionStatus(recordID, "Failed") 'do not change the Status name
                                        appendToLog("  Action FAILED.  " & actionReturnValue(1).ToString, 2)
                                        mosaicDll.Logger(senderMCP, "Test Action Status|Fail", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                                    Case executionStatusPassed
                                        mosaicDll.RSTAR_UpdateActionExecutionStatus(recordID, "Passed") 'do not change the Status name
                                        appendToLog("  Action PASSED.  " & actionReturnValue(1).ToString, 2)
                                        mosaicDll.Logger(senderMCP, "Test Action Status|Pass", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                                    Case executionStatusNotCompleted
                                        mosaicDll.RSTAR_UpdateActionExecutionStatus(recordID, "Not completed") 'do not change the Status name
                                        appendToLog("  Action NOT COMPLETED.  " & actionReturnValue(1).ToString, 2)
                                        mosaicDll.Logger(senderMCP, "Test Action Status|Not completed", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                                    Case executionStatusNotRun
                                        mosaicDll.RSTAR_UpdateActionExecutionStatus(recordID, "Not run") 'do not change the Status name
                                        appendToLog("  Action NOT RUN.  " & actionReturnValue(1).ToString, 2)
                                        mosaicDll.Logger(senderMCP, "Test Action Status|Not run", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                                    Case executionStatusSkipped
                                        mosaicDll.RSTAR_UpdateActionExecutionStatus(recordID, "Skipped") 'do not change the Status name
                                        appendToLog("  Action SKIPPED.  " & actionReturnValue(1).ToString, 2)
                                        mosaicDll.Logger(senderMCP, "Test Action Status|Skipped", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                                    Case Else
                                        mosaicDll.RSTAR_UpdateActionExecutionStatus(recordID, "Not completed") 'do not change the Status name
                                        appendToLog("  Action UNKNOWN STATUS.  " & actionReturnValue(1).ToString, 2)
                                        mosaicDll.Logger(senderMCP, "Test Action Status|Not completed", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                                End Select
                            End If
                        Catch ex As Exception
                            appendToLog("  An ERROR occurred: " & ex.Message, 2)

                            '~~~TESTING!  Handle this exception based on an Action's "On Error" status?
                        End Try
                        Try
                            mosaicDll.Logger(senderMCP, "Action Completed|" & scriptName, My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
                        Catch ex As Exception
                            MCP = -1
                            mcpMessageError = "Error writing to " & executionLog & ": " & ex.Message
                            Exit Function
                        End Try

                        'go to the next action
                        returnRecordSet.MoveNext()
                    End While
                Else
                    MCP = -1
                    mcpMessageError = "Error getting Actions."
                    Exit Function
                End If
            Catch ex As Exception
                MCP = -1
                mcpMessageError = "Error getting Actions: " & ex.Message
                Exit Function
            End Try
        Next

        'disconnect from db
        Try
            appendToLog("Disconnecting from database...")
            mosaicDll.DisconnectFromDB()
            appendToLog("Disconnection from database successful.")
        Catch ex As Exception
            MCP = -1
            mcpMessageError = "Error disconnecting from database: " & ex.Message
            Exit Function
        End Try
        Try
            mosaicDll.Logger(senderMCP, "***Automation Execution Complete***", My.Computer.FileSystem.CombinePath(resultsFolder, executionLog))
        Catch ex As Exception
            MCP = -1
            mcpMessageError = "Error writing to " & executionLog & ": " & ex.Message
            Exit Function
        End Try
    End Function
#End Region
End Class
